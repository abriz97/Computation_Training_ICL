{
  "hash": "4a28b51664ee26c96f7e5f4184955519",
  "result": {
    "markdown": "---\ntitle: \"Computational Training: running fastR\"\nformat: revealjs\n---\n\n\n## Great R resources\n\n::: nonincremental\nIn general:\n\n1.  [Advanced R](https://adv-r.hadley.nz/)\n2.  [R for Data Science](https://r4ds.hadley.nz/)\n3.  [RStudio Cheatsheets](https://www.rstudio.com/resources/cheatsheets/)\n4.  [Useful R packages](https://support.posit.co/hc/en-us/articles/201057987-Quick-list-of-useful-R-packages)\n\nCovering this session's topics\n\n5.  [data.table](https://rdatatable.gitlab.io/data.table/)\n6.  [parallel](https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html#the-parallel-package)\n:::\n\n## What is \"fast code\"?\n\n1.  ‚úèÔ∏è **Easy to write**\\\n    familiarity with code editor, libraries\n\n2.  üí° **Easy to understand**\\\n    structured, with consistent variable names, commented.\n\n3.  üîß **Easy to debug**\\\n    clear naming, DRY, tests.\n\n4.  üèéÔ∏è **Easy to run**\\\n    (profiling, C++, using \"optimized\" code).\n\n## Variable naming\n\n::: r-stack\n![](../figures/MagrittePipe.jpg){.fragment height=\"250\" fig-align=\"center\"}\n\n![](../figures/catcat.png){.fragment height=\"250\" fig-align=\"center\"}\n:::\n\n. . .\n\nnames should be consistent, descriptive, lower case, readable.\n\n. . .\n\nFor which snippet is it easier to guess the context?\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <-  10\ntmp1 <- tmp * 24\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_per_hour <- 10\ncases_per_day <- cases_per_hour * 24\n```\n:::\n\n:::\n:::\n\n::: footer\n[Dealing with the 2nd hardest thing in computer science (Patil)](https://indrajeetpatil.github.io/second-hardest-cs-thing/#/dealing-with-the-second-hardest-thing-in-computer-science)\n:::\n\n## Embrace functional programming I\n\n*Functions are first-class citizens in R*\n\n::: columns\n::: {.column width=\"57%\"}\n-   can be passed as arguments\n-   can be returned from other functions\n-   can be assigned to variables\n-   and more...\n:::\n\n::: {.column .fragment width=\"41%\"}\n\n::: {.cell filename='first-class-citizenship.R'}\n\n```{.r .cell-code}\nf <- function(x){x^2}\n\nlapply(1:10, f)\n\ngenerator <- function(n=2){\n    function(x){x^n}\n}\ncube <- generator(3)\n\nlist(one_function = f)\n```\n:::\n\n:::\n:::\n\n## Embrace functional programming II\n\n*Rethink for, while loops; \"apply\" instead*\n\n. . .\n\n> \"To become significantly more reliable, code must become more transparent. In particular, nested conditions and loops must be viewed with great suspicion. Complicated control flows confuse programmers. Messy code often hides bugs.\"\n>\n> --- Bjarne Stroustrup\n\n::: footer\n[Advanced R, Funtional Programming (Wickham)](https://adv-r.hadley.nz/functionals.html)\n:::\n\n. . .\n\n::: {style=\"text-align: right;\"}\n**...but why?**\n:::\n\n## \n\nSay you want to extract the $R^2$ from three linear models with different predictors (or formulae).\n\n\n::: {.cell filename='formulae.R'}\n\n```{.r .cell-code}\nformulae <- c(\n    Sepal.Length ~ Sepal.Width,\n    Sepal.Length ~ Petal.Length,\n    Sepal.Length ~ Species\n)\n```\n:::\n\n\n. . .\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell filename='bad way'}\n\n```{.r .cell-code}\nlm_results2 <- c()\n\nfor (formula in formulae) {\n    fit <- lm(formula, data = iris)\n    r2 <- summary(fit)$r.squared\n    lm_results2 <- c(lm_results2, r2)\n}\n```\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell filename='good way'}\n\n```{.r .cell-code}\nextract_r2 <- function(formula) {\n    fit <- lm(formula, data = iris)\n    r2 <- summary(fit)$r.squared\n    return(r2)\n}\n\nlm_results <- sapply(formulae, extract_r2)\n```\n:::\n\n:::\n:::\n\n. . .\n\n::: {style=\"text-align: center;\"}\nWhat's the difference?\n:::\n\n. . .\n\n\n::: {.cell filename='side effects'}\n\n```{.r .cell-code}\nexists(\"fit\")\n```\n:::\n\n\n::: footer\n[Advanced R, Functional Programming (Wickham)](https://adv-r.hadley.nz/fp.html)\n:::\n\n::: notes\n-   For loops may still be prefered (or the only choice), when the order of execution is important, and different runs may affect each other.\n:::\n\n## The `parallel` package\n\nYou can imagine wanting to run each of the apply/for loop iterations in `parallel`.\n\n::: notes\nespecially if iterations are independent and computationally expensive. Two quick sentences on the two different approaches.\n:::\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell filename='sockets (not on Windows)'}\n\n```{.r .cell-code}\nlibrary(parallel)\nf <- function(i) {\n    lme4::lmer(\n        Petal.Width ~ . - Species + (1 | Species),\n        data = iris)\n}\n\nsystem.time(save1 <- lapply(1:100, f))\n##    user  system elapsed\n##   2.048   0.019   2.084\nsystem.time(save2 <- mclapply(1:100, f))\n##    user  system elapsed\n##   1.295   0.150   1.471\n```\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell filename='forking'}\n\n```{.r .cell-code}\nnum_cores <- detectCores()\ncl <- makeCluster(num_cores)\nsystem.time(save3 <- parLapply(cl, 1:100, f))\n#    user  system elapsed \n#   0.198   0.044   1.032 \nstopCluster(cl)\n```\n:::\n\n\n-   requires further attention\n:::\n:::\n\n::: footer\n[Parallel computing in R](https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html#the-parallel-package)\n:::\n\n## Introduction to [data.table](https://rdatatable.gitlab.io/data.table/)\n\n-   `data.table` is a package that extends the data.frame class.\n-   (Quicker) alternative to `dplyr` for large datasets.\n-   [cheatsheet](https://rstudio.github.io/cheatsheets/datatable.pdf)\n\n## all you need to know {auto-animate=true auto-animate-easing=\"ease-in-out\"}\n\n::: {data-id=\"dt\" auto-animate-delay=\"0\" style=\"text-align: center; font-size: 100px;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n\n-   use the data.table called `dt` ...\n-   subset it on the rows specified by [i]{style=\"color:blue;\"}...\n-   and manipulate columns with [j]{style=\"color:red;\"}...\n-   grouped according to [by]{style=\"color:green;\"}.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\niris_dt <- as.data.table(iris)\n```\n:::\n\n\n## `iris` summaries {auto-animate=true auto-animate-easing=\"ease-in-out\"} \n\n#### Subsetting and Summarizing \n\n::: top-right\n::: {data-id=\"dt\" auto-animate-delay=\"0\" style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n-   Say we want to calculate [the mean sepal length]{style=\"color:red;\"} for the [setosa species]{style=\"color:blue;\"}...\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\niris_dt[Species == \"setosa\", mean(Sepal.Length)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.006\n```\n:::\n:::\n\n:::\n:::\n\n#### Grouping and Aggregating\n\n::: top-right\n::: {style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n-   Now we want to [repeat the above]{style=\"color:red;\"} for [every species]{style=\"color:green;\"}, in one command.\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\niris_dt[, mean(Sepal.Length), by=Species]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Species    V1\n1:     setosa 5.006\n2: versicolor 5.936\n3:  virginica 6.588\n```\n:::\n:::\n\n:::\n:::\n\n## `iris` summaries (`.VARS`)\n\n::: top-right\n::: {style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\n#### Counting entries (`.N`)\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n-   Count the total [number of observations]{style=\"color:red;\"} per [species]{style=\"color:green;\"}, with [sepal length \\> 5]{style=\"color:blue;\"}.\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\niris_dt[Sepal.Length>5, .N, by=Species]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Species  N\n1:     setosa 22\n2: versicolor 47\n3:  virginica 49\n```\n:::\n:::\n\n:::\n:::\n\n#### Print 1st entry of each group (`.SD`)\n\n::: top-right\n::: {style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n-   Print the [first entry]{style=\"color:red;\"} of each [group (species)]{style=\"color:green;\"}.\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\niris_dt[, .SD[1], by=Species]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1:     setosa          5.1         3.5          1.4         0.2\n2: versicolor          7.0         3.2          4.7         1.4\n3:  virginica          6.3         3.3          6.0         2.5\n```\n:::\n:::\n\n:::\n\n::: footer\n`?.I` for documentation on data.table's special symbols.\n:::\n:::\n\n## Modifying the `dt` (in place)\n\n::: top-right\n::: {style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\nYou will need a walrus (operator):\n\n::: {.columns}\n\n::: {.column width=\"50%\" }\n\n::: {style=\"text-align: center; font-size: 100px;\"}\n`:=` \n:::\n\n::: {.nonincremental .smaller .fragment}\n- used in <span style=\"color:red;\"> j </span> \n- `name := vector` to act on a single column.\n- `(names) := list of vectors` to act on multiple columns.\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](../figures/walrus.jpeg){height=\"300\" fig-align=\"center\"}\n:::\n\n:::\n\n\n\n## Modifying the `dt` (in place)\n\n\n#### Define a new column\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n-   Say you want species names to sound more Italian.\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\niris_dt[, Species_ita := paste0(\n    Species, 'ino'\n), by=Species]\niris_dt[, unique(Species_ita)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"setosaino\"     \"versicolorino\" \"virginicaino\" \n```\n:::\n:::\n\n:::\n:::\n\n#### Modify existing column\n\n::: top-right\n::: {style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\n::: columns\n::: {.column .fragment width=\"50%\"}\n-   The \"aino\" ending does not sound right, let's remove the \"a\".\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\niris_dt[, Species_ita := gsub(\n    \"aino\",\"ino\",\n    Species_ita\n), by=Species_ita]\niris_dt[, unique(Species_ita)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"setosino\"      \"versicolorino\" \"virginicino\"  \n```\n:::\n:::\n\n:::\n:::\n\n## Acting on multiple columns\n\n::: top-right\n::: {style=\"text-align: center;\"}\ndt\\[[i]{style=\"color:blue;\"}, [j]{style=\"color:red;\"}, [by]{style=\"color:green;\"}\\]\n:::\n:::\n\n#### Apply a function to multiple columns\n\n::: columns\n::: {.column .fragment width=\"40%\"}\n-   Let us round the numeric columns to integers...\n:::\n\n::: {.column .fragment width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeric_cols <- names(iris_dt)[sapply(iris_dt, is.numeric)]\niris_dt[, lapply(\n    .SD, as.integer\n), .SDcols = numeric_cols] |> head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Sepal.Length Sepal.Width Petal.Length Petal.Width\n1:            5           3            1           0\n2:            4           3            1           0\n```\n:::\n:::\n\n:::\n:::\n\n#### Define multiple columns at once\n\n::: columns\n::: {.column .fragment width=\"40%\"}\n-   ... and store them in columns with the same name, but with a `_int` suffix.\n:::\n\n::: {.column .fragment width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_cols <- paste0(numeric_cols, \"_int\")\niris_dt[, (new_cols) := lapply(\n    .SD, as.integer\n), .SDcols = numeric_cols]; head(iris_dt, n=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species Species_ita\n1:          5.1         3.5          1.4         0.2  setosa    setosino\n2:          4.9         3.0          1.4         0.2  setosa    setosino\n   Sepal.Length_int Sepal.Width_int Petal.Length_int Petal.Width_int\n1:                5               3                1               0\n2:                4               3                1               0\n```\n:::\n:::\n\n:::\n:::\n\n## Summary and advanced topics\n\n::: nonincremental\n-   `data.table` is a powerful package for data manipulation.\n-   quick to write and quick to run BUT not the easiest to read.\n\nAdvanced topics:\n\n-   Definitely print out a [cheatsheet](https://rstudio.github.io/cheatsheets/datatable.pdf) if you want to start using it.\n-   [data.table function reference](https://rdatatable.gitlab.io/data.table/reference/index.html) for additional wrangling utilities.\n-   [Vignettes](https://rdatatable.gitlab.io/data.table/articles/datatable-intro.html) for more advanced topics.\n:::\n\n::: {footer}\n:::\n\n## Profiling\n\n-   Identify (and hopefully fix!) bottlenecks in your code.\n-   The [`profvis`](https://rstudio.github.io/profvis/) package is a good package to use for this purpose.\n\n![](../figures/profiling.webp){.fragment height=\"350\" fig-align=\"center\"}\n\n## Profiling Example: Column Means\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nlibrary(profvis)\nlibrary(data.table)\nn <- 4e5\ncols <- 150\ndata <- as.data.frame(x = matrix(rnorm(n * cols, mean = 5), ncol = cols))\ndata <- cbind(id = paste0(\"g\", seq_len(n)), data)\ndataDF <- as.data.table(data)\nnumeric_vars <- setdiff(names(data), \"id\")\n\nprofvis({\n  means <- apply(data[, names(data) != \"id\"], 2, mean)\n  means <- colMeans(data[, names(data) != \"id\"])\n  means <- lapply(data[, names(data) != \"id\"], mean)\n  means <- vapply(data[, names(data) != \"id\"], mean, numeric(1))\n  means <- matrixStats::colMeans2(as.matrix(data[, names(data) != \"id\"]))\n  means <- dataDF[, lapply(.SD, mean), .SDcols = numeric_vars]\n})\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"profvis html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-fd34beec408accce956e\" style=\"width:100%;height:600px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fd34beec408accce956e\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,76,76,77,77,77,78,78,78,79,79,80,80,81,81,82,82,83,83,83,84,84,85,85,85,86,86,86,87,87,88,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,95,96,96,96,97,97,97,98,98,98,99,99,100,100,100,101,101,102,102,103,103,103,104,104,105,105,106,106,106,107,107,108,108,109,109,110,110,111,111,111,111,111,112,112,112,112,112,113,113,113,113,113,114,114,114,114,115,115,115,115,116,116,116,116,117,117,117,117,118,118,118,118,119,119,119,119,120,120,120,120,121,121,121,121,122,122,122,122,123,123,123,123,124,124,124,124,125,125,125,125,126,126,126,126,127,127,127,127,128,128,128,128,129,129,129,129,130,130,130,130,131,131,131,131,132,132,132,132,133,133,133,133,134,134,134,134,135,135,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,142,143,143,143,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,149,149,149,150,150,150,151,151,151,152,152,152,153,153,153,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,159,159,159,160,160,160,161,161,161,162,162,162,163,163,163,164,164,164,165,165,166,166,166,166,167,167,167,167,168,168,168,168,169,169,169,169,170,170,170,170,171,171,171,171,172,172,172,172,173,173,173,173,174,174,174,174,175,175,175,176,176,176,177,177,177,178,178,178,179,179,179,180,180,180,181,181,181,182,182,182,183,183,183,184,184,184,185,185,185,186,186,186,187,187,187,188,188,188,189,189,189,190,190,190,191,191,191,192,192,192,193,193,193,194,194,194,195,195,195,196,196,196,197,197,197,198,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,212,213,213,213,214,214,214,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220,221,221,221,222,222,222,223,223,223],\"depth\":[5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,2,1,3,2,1,3,2,1,2,1,2,1,2,1,2,1,3,2,1,2,1,3,2,1,3,2,1,2,1,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,3,2,1,2,1,2,1,3,2,1,2,1,2,1,3,2,1,2,1,2,1,2,1,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1],\"label\":[\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"<GC>\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"aperm.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"FUN\",\"apply\",\".main\",\"<GC>\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"FUN\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"mean.default\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"apply\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"unlist\",\"as.matrix.data.frame\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"colMeans\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"mean.default\",\"vapply\",\".main\",\"length\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"<GC>\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"unlist\",\"as.matrix.data.frame\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\"matrixStats::colMeans2\",\".main\",\".subset2\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\",\"mean.default\",\"lapply\",\".main\"],\"filenum\":[null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,1,null,1,null,null,1,null,null,1,null,1,null,1,null,1,null,1,null,null,1,null,1,null,null,1,null,null,1,null,1,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,1,null,null,1,null,1,null,1,null,null,1,null,1,null,1,null,null,1,null,1,null,1,null,1,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,11,null,11,null,null,11,null,null,11,null,11,null,11,null,11,null,11,null,null,11,null,11,null,null,11,null,null,11,null,11,null,null,11,null,11,null,11,null,11,null,11,null,11,null,11,null,null,11,null,null,11,null,null,11,null,null,11,null,11,null,null,11,null,11,null,11,null,null,11,null,11,null,11,null,null,11,null,11,null,11,null,11,null,11,null,null,null,null,12,null,null,null,null,12,null,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,null,null,12,null,12,null,12,null,12,null,12,null,12,null,12,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,13,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,14,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,15,null,15,null,15,null,15,null,15,null,15,null,15,null,15,null,15,null,15,null,15,null,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[937.956268310547,937.956268310547,937.956268310547,937.956268310547,937.956268310547,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956184387207,937.956024169922,937.956024169922,937.956024169922,937.956024169922,937.956024169922,937.956024169922,937.956024169922,937.956024169922,937.956024169922,937.956024169922,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.71969604492,1395.72411346436,1395.72411346436,1395.72411346436,1395.72411346436,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.72108459473,1395.71642303467,1395.71642303467,1395.71642303467,1395.71642303467,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1853.48009490967,1862.63674926758,1862.63674926758,1876.36995697021,1876.36995697021,1894.68098449707,1894.68098449707,1894.68098449707,1908.41419219971,1908.41419219971,1908.41419219971,1931.30278778076,1931.30278778076,1945.0359954834,1945.0359954834,1967.92467498779,1967.92467498779,1981.65788269043,1981.65788269043,1999.96891021729,1999.96891021729,1999.96891021729,2018.27976989746,2018.27976989746,2036.59079742432,2036.59079742432,2036.59079742432,2050.32400512695,2050.32400512695,2050.32400512695,2073.21260070801,2073.21260070801,2086.94589233398,2086.94589233398,2086.94589233398,2109.83448791504,2109.83448791504,2123.56769561768,2123.56769561768,2146.45637512207,2146.45637512207,2160.18958282471,2160.18958282471,2183.0782623291,2183.0782623291,2196.81147003174,2196.81147003174,2215.12249755859,2215.12249755859,2215.12249755859,2228.85564422607,2228.85564422607,2228.85564422607,2239.53707122803,2239.53707122803,2239.53707122803,1871.79288482666,1871.79288482666,1871.79288482666,1903.83695220947,1903.83695220947,1922.14797973633,1922.14797973633,1922.14797973633,1954.19204711914,1954.19204711914,1972.50299072266,1972.50299072266,1995.39169311523,1995.39169311523,1995.39169311523,2013.70261383057,2013.70261383057,2036.59129333496,2036.59129333496,2054.90232086182,2054.90232086182,2054.90232086182,2082.36865234375,2082.36865234375,2100.67959594727,2100.67959594727,2128.14601135254,2128.14601135254,2146.45695495605,2146.45695495605,2155.66217803955,2155.66217803955,2155.66217803955,2155.66217803955,2155.66217803955,1696.3726272583,1696.3726272583,1696.3726272583,1696.3726272583,1696.3726272583,1395.77333831787,1395.77333831787,1395.77333831787,1395.77333831787,1395.77333831787,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.4928894043,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.49821472168,1853.50685882568,1853.50685882568,1853.50685882568,1853.5079574585,1853.5079574585,1853.5079574585,1853.508644104,1853.508644104,1853.508644104,1853.50974273682,1853.50974273682,1853.50974273682,1853.51042938232,1853.51042938232,1853.51042938232,1853.51152801514,1853.51152801514,1853.51152801514,1853.5122833252,1853.5122833252,1853.5122833252,1853.51331329346,1853.51331329346,1853.51331329346,1853.51399993896,1853.51399993896,1853.51399993896,1853.51509857178,1853.51509857178,1853.51509857178,1853.51585388184,1853.51585388184,1853.51585388184,1853.5168838501,1853.5168838501,1853.5168838501,1853.5260848999,1853.5260848999,1853.5260848999,1853.52711486816,1853.52711486816,1853.52711486816,1853.52787017822,1853.52787017822,1853.52787017822,1853.52896881104,1853.52896881104,1853.52896881104,1853.52965545654,1853.52965545654,1853.52965545654,1853.53075408936,1853.53075408936,1853.53075408936,1853.53144073486,1853.53144073486,1853.53144073486,1853.53253936768,1853.53253936768,1853.53253936768,1853.53322601318,1853.53322601318,1853.53322601318,1853.534324646,1853.534324646,1853.534324646,1853.53507995605,1853.53507995605,1853.53507995605,1853.71255493164,1853.71255493164,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1853.72203826904,1395.95706939697,1395.95706939697,1395.95706939697,1395.95706939697,938.18285369873,938.18285369873,938.18285369873,938.18285369873,938.18285369873,938.18285369873,938.18285369873,938.18285369873,937.992126464844,937.992126464844,937.992126464844,937.992126464844,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.75579833984,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.7610168457,1395.79655456543,1395.79655456543,1395.83668518066,1395.83668518066,1395.83668518066,1395.83771514893,1395.83771514893,1395.83771514893,1395.83840179443,1395.83840179443,1395.83840179443,1395.8394317627,1395.8394317627,1395.8394317627,1395.84004974365,1395.84004974365,1395.84004974365,1395.84114837646,1395.84114837646,1395.84114837646,1395.84176635742,1395.84176635742,1395.84176635742,1395.84279632568,1395.84279632568,1395.84279632568,1395.84348297119,1395.84348297119,1395.84348297119,1395.84451293945,1395.84451293945,1395.84451293945,1395.84526824951,1395.84526824951,1395.84526824951,1395.84629821777,1395.84629821777,1395.84629821777],\"meminc\":[0,0,0,0,0,-8.392333984375e-05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.00016021728515625,0,0,0,0,0,0,0,0,0,457.763671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00441741943359375,0,0,0,-0.00302886962890625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.00466156005859375,0,0,0,457.763671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.15665435791016,0,13.7332077026367,0,18.3110275268555,0,0,13.7332077026367,0,0,22.8885955810547,0,13.7332077026367,0,22.8886795043945,0,13.7332077026367,0,18.3110275268555,0,0,18.3108596801758,0,18.3110275268555,0,0,13.7332077026367,0,0,22.8885955810547,0,13.7332916259766,0,0,22.8885955810547,0,13.7332077026367,0,22.8886795043945,0,13.7332077026367,0,22.8886795043945,0,13.7332077026367,0,18.3110275268555,0,0,13.7331466674805,0,0,10.6814270019531,0,0,-367.744186401367,0,0,32.0440673828125,0,18.3110275268555,0,0,32.0440673828125,0,18.3109436035156,0,22.8887023925781,0,0,18.310920715332,0,22.8886795043945,0,18.3110275268555,0,0,27.4663314819336,0,18.3109436035156,0,27.4664154052734,0,18.3109436035156,0,9.20522308349609,0,0,0,0,-459.28955078125,0,0,0,0,-300.59928894043,0,0,0,0,457.719551086426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0053253173828125,0,0,0,0,0,0,0,0,0,0,0,0.00864410400390625,0,0,0.0010986328125,0,0,0.0006866455078125,0,0,0.0010986328125,0,0,0.0006866455078125,0,0,0.0010986328125,0,0,0.00075531005859375,0,0,0.00102996826171875,0,0,0.0006866455078125,0,0,0.0010986328125,0,0,0.00075531005859375,0,0,0.00102996826171875,0,0,0.0092010498046875,0,0,0.00102996826171875,0,0,0.00075531005859375,0,0,0.0010986328125,0,0,0.0006866455078125,0,0,0.0010986328125,0,0,0.0006866455078125,0,0,0.0010986328125,0,0,0.0006866455078125,0,0,0.0010986328125,0,0,0.00075531005859375,0,0,0.177474975585938,0,0.00948333740234375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-457.76496887207,0,0,0,-457.774215698242,0,0,0,0,0,0,0,-0.190727233886719,0,0,0,457.763671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.005218505859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0355377197265625,0,0.040130615234375,0,0,0.00102996826171875,0,0,0.0006866455078125,0,0,0.00102996826171875,0,0,0.00061798095703125,0,0,0.0010986328125,0,0,0.00061798095703125,0,0,0.00102996826171875,0,0,0.0006866455078125,0,0,0.00102996826171875,0,0,0.00075531005859375,0,0,0.00102996826171875,0,0],\"filename\":[null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,\"<expr>\",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,\"<expr>\",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[{\"filename\":\"<expr>\",\"content\":\"library(profvis)\\nlibrary(data.table)\\nn <- 4e5\\ncols <- 150\\ndata <- as.data.frame(x = matrix(rnorm(n * cols, mean = 5), ncol = cols))\\ndata <- cbind(id = paste0(\\\"g\\\", seq_len(n)), data)\\ndataDF <- as.data.table(data)\\nnumeric_vars <- setdiff(names(data), \\\"id\\\")\\n\\nprofvis({\\n  means <- apply(data[, names(data) != \\\"id\\\"], 2, mean)\\n  means <- colMeans(data[, names(data) != \\\"id\\\"])\\n  means <- lapply(data[, names(data) != \\\"id\\\"], mean)\\n  means <- vapply(data[, names(data) != \\\"id\\\"], mean, numeric(1))\\n  means <- matrixStats::colMeans2(as.matrix(data[, names(data) != \\\"id\\\"]))\\n  means <- dataDF[, lapply(.SD, mean), .SDcols = numeric_vars]\\n})\",\"normpath\":\"<expr>\"}],\"prof_output\":\"/tmp/RtmpMBlmk5/file860546f22ae77.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Good coding practice: Reproducibility & Generalisability\n\nWhy are code reproducibility & generalisability important?\n\n-   ‚úÖ Transparency & Verification\n-   ü§ù Collaboration & Longevity\n-   üîç Quicker detection of errors\n\n## Reproducibility\n\n-   Main idea: Be able to reproduce results to ensure they are valid.\n-   Common practices:\n    -   Setting the seed\n    -   Importing all necessary packages\n    -   Documenting R environment ([`sessionInfo()`](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/sessionInfo))\n\n::: columns\n::: {.column .fragment width=\"33%\"}\n\n::: {.cell filename='bad way'}\n\n```{.r .cell-code}\nx <- rnorm(1)\ndtruncnorm(x, -5, 5, 0, 1)\n```\n:::\n\n:::\n\n::: {.column .fragment width=\"33%\"}\n\n::: {.cell filename='still bad...'}\n\n```{.r .cell-code}\nset.seed(1234)\nx <- rnorm(1)\ndtruncnorm(x, -5, 5, 0, 1)\n```\n:::\n\n:::\n\n::: {.column .fragment width=\"33%\"}\n\n::: {.cell filename='there we go!'}\n\n```{.r .cell-code}\nlibrary(truncnorm)\nset.seed(1234)\nx <- rnorm(1)\ndtruncnorm(x, -5, 5, 0, 1)\n```\n:::\n\n:::\n:::\n\n## Generalisability\n\n-   Code should be \"generalisable\" meaning that anyone else can refer to it and use it on their own data.\n-   Common practices:\n    -   ‚öôÔ∏è Write functions for operations you use frequently\n    -   üí¨ Document your code (add comments)\n    -   ‚ùì Add basic checks (testing)\n    -   ‚úîÔ∏è‚ùå Test your code on different data sets\n\n## Generalisability: Example {.smaller}\n\n-   **Task:** Create a function `kmeans_recip` that does the following:\n    -   Takes a data set as input.\n    -   Computes reciprocals of variables (i.e. for each value $x$ it computes $1/x$).\n    -   Performs K-Means clustering (function `kmeans`) on the resulting data set.\n    -   Returns the cluster assignment for the first 20 observations.\n-   This function will be used on the `iris` data set (with K=3 clusters).\n\n## Generalisability: Bad example\n\n::: fragment\n\n::: {.cell filename='don\\'t even bother...'}\n\n```{.r .cell-code}\nkmeans_recip <- function(){\n  for (i in c(1:4)){\n    iris[, i] <- 1/iris[, i]\n  }\n  kmeans_res <- kmeans(iris[, c(1:4)], centers = 3)\n  return(kmeans_res$cluster)\n}\nkmeans_recip()[1:20]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 2 2 2 1 1 2 2 2 2 2 2 2 2 1 1 1 1 1\n```\n:::\n:::\n\n:::\n\n## Generalisability: OK example\n\n-   The previous example works but it's really not generalisable...\n-   Obvious things that need improvement:\n    -   Hardcoded values (first 4 columns are numeric in `iris`)\n    -   Data set should be an input argument\n\n::: fragment\n\n::: {.cell filename='it\\'s getting better'}\n\n```{.r .cell-code}\nkmeans_recip <- function(data, cont_cols){\n  for (i in cont_cols){\n    data[, i] <- 1/data[, i]\n  }\n  kmeans_res <- kmeans(data[, cont_cols], centers = 3)\n  return(kmeans_res$cluster)\n}\nkmeans_recip(data = iris, cont_cols = c(1:4))[1:20]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 3 3 3 3 3 1 1 3 3 3 3 3 3 3 3 1 1 1 1 1\n```\n:::\n:::\n\n:::\n\n## Generalisability: Good example {.smaller}\n\n-   We can still do better! More things to consider:\n    -   Division by 0 is not allowed\n    -   Determine numerical variables automatically\n    -   Ensure there exists at least one continuous variable\n    -   Add some comments\n\n::: fragment\n\n::: {.cell filename='that\\'s looking good'}\n\n```{.r .cell-code}\nkmeans_recip <- function(data){\n  # Obtain numerical variables\n  cont_cols <- which(sapply(data, is.numeric))\n  # Check there is at least 1 numerical variable\n  if (length(cont_cols)==0) stop('No numerical variables!')\n  for (i in cont_cols){\n    # Check if numerical variable takes 0 value\n    ifelse(any(data[, i] == 0),\n           stop('Division by 0 not allowed!'),\n           data[, i] <- 1/data[, i])\n  }\n  # Apply K-Means clustering\n  kmeans_res <- kmeans(data[, cont_cols], centers = 3)\n  return(kmeans_res$cluster)\n}\nkmeans_recip(data = iris)[1:20]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 3 3 1 1 1 1 1 1 1 1 3 3 3 3 3\n```\n:::\n:::\n\n:::\n\n## Generalisability: Can we generalise?\n\n-   Now we can also check if this works on the `diamonds` data set from the `ggplot2` package.\n\n::: fragment\n\n::: {.cell filename='seems like it works!'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nkmeans_recip(data = diamonds)[1:20]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ifelse(any(data[, i] == 0), stop(\"Division by 0 not allowed!\"), : Division by 0 not allowed!\n```\n:::\n:::\n\n:::\n\n## Debugging\n\n-   üêõ Debugging is the process of finding and fixing errors in your code.\n-   ü§¨ Generally annoying but can be made much easier with a few simple steps!\n\n![](../figures/debugging.png){.fragment height=\"300\" fig-align=\"center\"}\n\n## Debugging made easy\n\n-   Common practices to debug your code more easily include:\n    -   üìñ Read error messages carefully\n    -   üñ®Ô∏è Use print messages (`cat()`, `print()`, `message()` etc.)\n    -   üíæ Save objects that may be causing the error (to be able to reproduce it)\n    -   üìë A bit more \"advanced\" options are `traceback()`, `browser()`, `debug()` [(more details here)](https://adv-r.hadley.nz/debugging.html)\n    -   üíª [Don't forget:]{.underline} Google, Stack Overflow, ChatGPT etc. are your friends\n\n## Error Handling\n\n-   üò∞ Sometimes errors cannot be avoided...\n-   üéâ Good news is we can handle them!\n-   üíä Error handling is the process of responding to and recovering from error conditions.\n\n![](../figures/errorhandling.webp){.fragment height=\"300\" fig-align=\"center\"}\n\n## Error Handling: the `tryCatch()` syntax\n\n-   [`tryCatch()`](https://www.r-bloggers.com/2020/10/basic-error-handing-in-r-with-trycatch/) is the function to use for error handling in R.\n\n::: fragment\n\n::: {.cell filename='basic tryCatch syntax'}\n\n```{.r .cell-code}\nresult <- tryCatch({\n  expr\n  },\n  warning = function(w){\n    warning-handler-code\n    },\n  error = function(e){\n    error-handler-code\n    },\n  finally = {\n    cleanup-code\n  }\n)\n```\n:::\n\n:::\n\n## Error Handling: basic example\n\n::: fragment\n\n::: {.cell filename='tryCatch example'}\n\n```{.r .cell-code}\nsafe_log <- function(x){\n  result <- tryCatch({\n    log(x) # Attempt to calculate the logarithm\n  },\n  warning = function(w){\n    message(\"A warning occurred: \", w) # Handle warnings\n    NULL # Return NULL if a warning occurs\n  },\n  error = function(e){\n    message(\"An error occurred: \", e) # Handle the error\n    NA  # Return NA if an error occurs\n  },\n  finally = {\n    # This block executes no matter what\n    message(\"Logarithm attempt completed.\")\n  })\n  return(result)\n}\n```\n:::\n\n:::\n\n## Error Handling: basic example\n\n::: fragment\n\n::: {.cell filename='tryCatch works!'}\n\n```{.r .cell-code}\nprint(safe_log(2024))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLogarithm attempt completed.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.612831\n```\n:::\n\n```{.r .cell-code}\nprint(safe_log(-8))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nA warning occurred: simpleWarning in log(x): NaNs produced\n\nLogarithm attempt completed.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nprint(safe_log(\"zero\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAn error occurred: Error in log(x): non-numeric argument to mathematical function\n\nLogarithm attempt completed.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n:::\n\n::: notes\n{background-iframe=\"hello-matrix/index.html\"} let us add this with the hex of data.table at the end.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"site_libs/profvis-binding-0.3.7/profvis.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}